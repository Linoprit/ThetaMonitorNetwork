/*
 * Unit_Interpreter.cpp
 *
 *  Created on: 14.03.2021
 *      Author: harald
 */

#include "Unit_Interpreter.h"
#include <Sockets/CrcSocket.h>
#include <string>
#include <System/serialPrintf.h>

using ::testing::Expectation;
using ::testing::AtLeast;


TEST(InterpreterTest, basis) {
/*	MockDispatcher mockDispatcher;
	Interpreter ip(&mockDispatcher);
	CmdBufferType comLine;

	char command[] = "wIdTable";
	memcpy(comLine.data(), command, sizeof(command));

	EXPECT_CALL(mockDispatcher, PenUp()).Times(AtLeast(1));
	ip.doit(comLine);*/
}

TEST(InterpreterTest, cmdWriteIdTableEntry) {
/*	MockDispatcher mockDispatcher;
	Interpreter ip(&mockDispatcher);
	CmdBufferType comLine;

	char command[] = "wIdTable 3103548024, -50,	50, 0, 0, 'INNEN   ', 0 ";
	memcpy(comLine.data(), command, sizeof(command));

	EXPECT_CALL(mockDispatcher, PenUp()).Times(AtLeast(1));
	ip.doit(comLine);
*/
}




//@formatter:off
// prints the hashes for the Sensor-Addresses. Disabled by default.
TEST(InterpreterTest, DISABLED_calcIDTablesHashes){
	constexpr uint8_t addrLen = 22;
	uint8_t addressTbl[addrLen][8] = {						  // result
		{  0x28, 0xFF, 0x89, 0x0E, 0x02, 0x17, 0x03, 0x4A },  // 3103548024
		{  0x28, 0xFF, 0x45, 0xB1, 0xC2, 0x17, 0x01, 0xAD } , // 1294211458
		{  0x28, 0xFF, 0x03, 0xB7, 0xC2, 0x17, 0x01, 0xD1 } , // 3932845497
		{  0x28, 0xFF, 0x76, 0xC7, 0xC0, 0x17, 0x01, 0x89 } , // 3159888747
		{  0x28, 0xFF, 0xAB, 0xB0, 0xC2, 0x17, 0x01, 0x5A } , // 3312979629
		{  0x28, 0xFF, 0xC4, 0xAD, 0xC2, 0x17, 0x01, 0x81 } , // 1397168482
		{  0x28, 0xFF, 0xA6, 0x40, 0xC0, 0x17, 0x02, 0x6A } , // 3822322055
		{  0x28, 0xFF, 0x34, 0x99, 0xC0, 0x17, 0x01, 0x2E } , // 4232230555
		{  0x28, 0xFF, 0x38, 0x17, 0x60, 0x17, 0x05, 0x54 }	, // 3107815502
		// nicht zugeteilt
		{  0x28, 0xFF, 0x99, 0xC1, 0xC0, 0x17, 0x01, 0x35 } , // 3044662693
		{  0x28, 0xFF, 0x10, 0xC4, 0xC0, 0x17, 0x01, 0x8C } , // 196920976
		{  0x28, 0xFF, 0x75, 0x82, 0xC2, 0x17, 0x01, 0xE9 }	, // 3504230533
		// PCB-Modules
		{ 0x28, 0x1C, 0x48, 0x46, 0x92, 0x0A, 0x02, 0x3A },   // 4058285955
		{ 0x28, 0xE0, 0x6F, 0x45, 0x92, 0x13, 0x02, 0x4A },   // 2802107143
		{ 0x28, 0x61, 0x4C, 0x46, 0x92, 0x0A, 0x02, 0xF7 },   // 1186060932
		{ 0x28, 0x7D, 0xDA, 0x45, 0x92, 0x0D, 0x02, 0x1C },   // 4130136082
		{ 0x28, 0xE0, 0x3E, 0x45, 0x92, 0x06, 0x02, 0x01 },   // 1431004260
		{ 0x28, 0x8F, 0x56, 0x45, 0x92, 0x06, 0x02, 0xC9 },   // 3567186629
		{ 0x28, 0xC4, 0x0B, 0x45, 0x92, 0x16, 0x02, 0xD1 },   // 2575569828
		{ 0x28, 0x75, 0xB3, 0x45, 0x92, 0x0C, 0x02, 0x9B },   // 668176713
		{ 0x28, 0x83, 0x50, 0x46, 0x92, 0x0A, 0x02, 0xED },   // 1943981157
		{ 0x28, 0x0E, 0xF4, 0x45, 0x92, 0x0D, 0x02, 0x87 }    // 26376452
	};

	printf("hash \t address\n");

	for (uint8_t i = 0; i < addrLen; i++) {
		uint32_t result = CrcSocket::calc_chksum32(
				reinterpret_cast<uint32_t*>(addressTbl[i]), 2);
		printf("%u\t: %i %i %i %i %i %i %i %i\n", result,
				addressTbl[i][0],
				addressTbl[i][1],
				addressTbl[i][2],
				addressTbl[i][3],
				addressTbl[i][4],
				addressTbl[i][5],
				addressTbl[i][6],
				addressTbl[i][7]);
	}
}
//@formatter:on
